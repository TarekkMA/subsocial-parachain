
//! Autogenerated weights for pallet_proxy_wrapper
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-04, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `tarek-m1-pro`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./scripts/../target/release/subsocial-collator
    // benchmark
    // pallet
    // --chain
    // dev
    // --execution
    // wasm
    // --wasm-execution
    // Compiled
    // --pallet
    // pallet_proxy_wrapper
    // --extrinsic
    // *
    // --steps
    // 50
    // --repeat
    // 20
    // --heap-pages
    // 4096
    // --output
    // ./pallets/free-proxy/src/weights.rs
    // --template
    // ./.maintain/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(non_snake_case)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_proxy_wrapper.
pub trait WeightInfo {
    fn add_free_proxy() -> Weight;
}

/// Weights for pallet_proxy_wrapper using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
            // Storage: Proxy Proxies (r:1 w:1)
            // Storage: ProxyWrapper FreeProxyFlag (r:0 w:1)
        fn add_free_proxy() -> Weight {
        // Minimum execution time: 20_000 nanoseconds.
        Weight::from_ref_time(21_000_000)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            // Storage: Proxy Proxies (r:1 w:1)
            // Storage: ProxyWrapper FreeProxyFlag (r:0 w:1)
        fn add_free_proxy() -> Weight {
        // Minimum execution time: 20_000 nanoseconds.
        Weight::from_ref_time(21_000_000)
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().writes(2))
        }
    }
