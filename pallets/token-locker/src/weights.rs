//! Autogenerated weights for pallet_token_locker
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-02-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
    // ./scripts/../target/release/subsocial-collator
    // benchmark
    // --chain
    // dev
    // --execution
    // wasm
    // --wasm-execution
    // Compiled
    // --pallet
    // pallet_token_locker
    // --extrinsic
    // *
    // --steps
    // 50
    // --repeat
    // 20
    // --heap-pages
    // 4096
    // --output
    // ./pallets/token-locker/src/weights.rs
    // --template
    // ./.maintain/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_token_locker.
pub trait WeightInfo {
    fn lock_sub() -> Weight;
    fn request_unlock() -> Weight;
    fn try_refund() -> Weight;
}

/// Weights for pallet_token_locker using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
        impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
            // Storage: TokenLocker LockDetails (r:1 w:1)
        fn lock_sub() -> Weight {
        (19_806_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: TokenLocker LockDetails (r:1 w:0)
            // Storage: TokenLocker UnlockAt (r:1 w:1)
        fn request_unlock() -> Weight {
        (19_607_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
        }
            // Storage: TokenLocker LockDetails (r:1 w:1)
            // Storage: TokenLocker UnlockAt (r:1 w:1)
            // Storage: Balances Locks (r:1 w:1)
        fn try_refund() -> Weight {
        (31_046_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
        }
    }

    // For backwards compatibility and tests
    impl WeightInfo for () {
            // Storage: TokenLocker LockDetails (r:1 w:1)
        fn lock_sub() -> Weight {
        (19_806_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: TokenLocker LockDetails (r:1 w:0)
            // Storage: TokenLocker UnlockAt (r:1 w:1)
        fn request_unlock() -> Weight {
        (19_607_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
            // Storage: TokenLocker LockDetails (r:1 w:1)
            // Storage: TokenLocker UnlockAt (r:1 w:1)
            // Storage: Balances Locks (r:1 w:1)
        fn try_refund() -> Weight {
        (31_046_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
        }
    }
